1. What is a binary tree and what makes it unique to other trees?

A: A Binary Tree is a data structure in which each Node may point to a left child and a right child. Binary Tree may have up to two child Nodes: a left Node and a right Node. 

2. What is a heuristic?

A: Heuristics are guesses that an algorithm makes to solve a complex problem sooner by sacrificing accuracy.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A: The gamblerâ€™s fallacy is a common heuristic. This entails thinking an outcome is due to occur after a long stretch of its absence. For example, people often think a coin is bound to land tails-up if it has landed heads-up five times in a row. In reality, a fair coin is equally likely to land on either side regardless of its history.

4. What is the difference between a depth-first search and a breadth-first search?

A:Depth First Search is an algorithm for traversing or searching tree or graph data structures. Start at the root and explore as far as possible along each branch before backtracking.
Breadth First Search is also an algorithm for traversing or searching tree or graph data structures but instead starts at the tree root and explores the neighbor nodes first, before moving to the next level neighbors.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: Undirected graph's edge connecting to the two Nodes is ambiguous. It neither starts nor ends at either Node, it just connects the two nodes.

A-cyclic Graphs do not form loops. Doing a depth first search of an A-cyclic Graph will result in a dead-end.

Unweighted graphs do not assign the cost of travel between Nodes. Unlike Weighted graph which refers to an edge-weighted graph, where edges have weights or values. Without the qualification of weighted, the graph is typically assumed to be unweighted.

6. What kind of graph is a binary search tree?

A: A Binary Search Tree orders each Node in the Tree based on some quantifiable value. Nodes increase in value as we travel right, and decrease in value towards the left.

Programming Questions
For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.

Binary Search Tree Image

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

function findNumber(numberToFind) {
  var currentNode = this.root;

  while (currentNode != null) {
    if (numberToFind === currentNode.value) {
      return "The value " + currentNode.value + " exists in the list";
    } else if (numberToFind < currentNode.value){
      currentNode = currentNode.left;
    } else {
      currentNode = currentNode.right;
    }
  }
  return "The value " + numberToFind + " does not exist in the list";
}

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

function getDistanace(root, node1, node2) {

  var ancestor = LCA(root, node1, node2);
  var depth1 = getDepth(root, ancestor); 
  var depth2 = getDepth(root, node1); 
  var depth3 = getDepth(root, node2); 

  return depth2 + depth3 - 2 * depth1;
}

function LCA(currentNode, node1, node2) {
  if (currentNode == null)
    return null;
  if (currentNode == node1 || currentNode == node2)
    return currentNode;
  var left = LCA(currentNode.left, node1, node2); 
  var right = LCA(currentNode.right, node1, node2); 
  if(left != null && right != null)
    return currentNode;
  return left == null? right: left;
}

function getDepth(currentNode, targetNode) {
  if (currentNode == null)
    return -1;
  if (currentNode == targetNode)
    return 0;
  var left = getDepth(currentNode.left, targetNode);
  var right = getDepth(currentNode.right, targetNode);
  if (left == -1 && right == -1)
    return -1;
  return left == -1? right + 1: left + 1;
}
